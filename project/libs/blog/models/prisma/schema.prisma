// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  text
  video
  quote
  link
  photo
}

enum PostStatus {
  draft
  published
}

model Post {
  id                      String         @id @default(uuid())
  originalPublicationId   String?
  originalUserId          String?
  postTitle               String?        @map("title")
  videoLink               String?
  userId                  String         @map("user_id")
  type                    PostType
  createdAt               DateTime       @default(now()) @map("created_at")
  updatedAt               DateTime       @default(now()) @map("updated_at")
  publishedAt             DateTime       @default(now()) @map("published_at")
  publicationStatus       PostStatus
  isPublicationReposted   Boolean?        @default(false)
  publicationRepostNumber Int?
  comments                Comment[]
  likes                   Like[]
  postAnons               String?
  postText                String?
  quoteText               String?
  quoteAuthor             String?
  photo                   String?
  linkDescription         String?
  linkUrl                 String?
  tags                    String[]

  @@index([postTitle])
  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
